name: MinIO and Python Script

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-minio-and-python:
    runs-on: ubuntu-latest

    env:
      AWS_ENDPOINT_URL: "http://minio:9000"  # Usando el nombre del contenedor de MinIO
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start MinIO in Docker
        run: |
          # Levantar el contenedor de MinIO en una red personalizada
          docker network create minio-network  # Crear una red personalizada
          docker run -d --network minio-network --name minio \
            -e "MINIO_ACCESS_KEY=minioadmin" \
            -e "MINIO_SECRET_KEY=minioadmin" \
            -v /tmp/data:/data \
            -v /tmp/config:/root/.minio \
            minio/minio server /data

          # Esperar a que MinIO esté listo para aceptar conexiones
          sleep 10

          # Crear un bucket para las pruebas
          docker exec minio mc mb s3://localhost/test-bucket

      - name: Set up pytest container
        run: |
          # Ejecutar pytest dentro del contenedor de pytest conectado a la misma red que MinIO
          docker run --rm --network minio-network -v $GITHUB_WORKSPACE:/app -w /app python:3.9-slim bash -c "pip install pytest boto3 && pytest"

      - name: Post-test cleanup
        run: |
          # Detener y eliminar el contenedor de MinIO después de las pruebas
          docker stop minio
          docker rm minio
          docker network rm minio-network  # Limpiar la red personalizada
