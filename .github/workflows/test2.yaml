name: MinIO and Python Script

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-minio-and-python:
    runs-on: ubuntu-latest

    env:
      AWS_ENDPOINT_URL: "http://127.0.0.1:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start MinIO in Docker
        run: |
          # Levantar el contenedor de MinIO
          docker run -d -p 9000:9000 --name minio \
            -e "MINIO_ACCESS_KEY=minioadmin" \
            -e "MINIO_SECRET_KEY=minioadmin" \
            -v /tmp/data:/data \
            -v /tmp/config:/root/.minio \
            minio/minio server /data

          # Esperar a que MinIO esté listo para aceptar conexiones
          sleep 10

          # Crear un bucket para las pruebas
          docker exec minio mc alias set myminio http://127.0.0.1:9000
          docker exec minio mc mb myminio/test-bucket

      - name: Set up Docker for pytest
        run: |
          # Crear el contenedor de pytest con las dependencias necesarias
          docker build -t pytest-container -f Dockerfile .

      - name: Run pytest inside Docker container
        run: |
          # Ejecutar pytest dentro del contenedor de pytest, vinculado al contenedor de MinIO
          docker run --rm \
            -e AWS_ENDPOINT_URL=${{ env.AWS_ENDPOINT_URL }} \
            -e AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
            --link minio \
            pytest-container

      - name: Post-test cleanup
        run: |
          # Detener y eliminar el contenedor de MinIO después de las pruebas
          docker stop minio
          docker rm minio
